{"version":3,"sources":["verifySentence.js","converters.js","canvas/Toolbox.js","canvas/StepMenu.js","canvas/config.js","canvas/EGVariable.js","canvas/EGCut.js","canvas/Canvas.js","intro/CreateNew.js","intro/IntroWindow.js","App.js","serviceWorker.js","index.js"],"names":["require","binary","unary","arrToRegex","arr","map","el","replace","join","uReg","Object","keys","regexStr","binaryRegex","RegExp","atomicRegex","parenthesisRegex","sentence","verifyRecursive","res","match","exec","operators","escapeRegExp","string","binaryOperators","binarySymbReplace","unaryOperators","countUnary","statement","matchesList","val","op","c","split","some","charAt","stripUnary","s","convertStatement","substr","convertToEG","repeat","formula","String","verifySentence","parenthesis","left","right","eg","getMatchingParen","start","parens","j","length","Toolbox","props","state","functions","str","func","highlight","this","hidden","Fragment","className","ref","canvas","onClick","setSelection","React","Component","StepMenu","event","step","disabled","preventDefault","setStep","hide","currentStep","stepInfo","backEnabled","forwardEnabled","style","color","getColor","handleClick","src","process","gridSize","cutPadding","horizontal","vertical","cutCornerRadius","initialSeparation","EGVariable","text","createRef","getCoords","bind","x","y","cursorOver","dragging","panzoom","window","addEventListener","onMouseMove","handleDragStart","handleDragEnd","enableHighlight","selectedCallback","id","setState","current","cursor","evt","pause","resume","setCoords","clientX","clientY","Math","round","config","removeEventListener","pointerEvents","interaction","fill","onMouseEnter","onMouseLeave","children","EGCut","cut","BB","getBBoxData","update","bounding","_x","_y","_w","_h","getBBox","width","height","interval","setInterval","setTimeout","clearInterval","childEl","fillOpacity","strokeOpacity","stroke","rx","toString","ry","nanoid","Canvas","canvasContainer","renderStep","changePos","getSVGCoords","highlightCut","startSelection","proof","premises","conclusion","steps","data","moveListeners","highlights","var","cbFunction","insert","console","log","erase","erasure","iterate","dcRemove","doubleCutRemove","dcAdd","doubleCutAdd","selectable","nameOfFunction","copyStep","erased","findID","parent","findParent","index","indexOf","splice","push","ID","inside","cut1_id","cut2_id","cut1","type","level","changeCutLevel","concat","cutID","firstCut","secondCut","newContents","change","idFound","changeLevelMap","mapID","changeLevelArray","a","oldStep","newStep","copyDataMap","oldData","newData","d","copyDataArray","h","w","searchedStep","findInArray","findInMap","findIDArray","findIDMap","Array","assign","odd","stepIndex","renderRecurse","jsx","groupElement","unshift","highlightVar","setXY","key","Panzoom","maxZoom","minZoom","vw","max","document","documentElement","clientWidth","innerWidth","vh","clientHeight","innerHeight","currentX","maxX","maxY","stepZero","initXYRecurse","gapSize","X","initXY","convertToArray","i","subExp","moveTo","zoomTo","domX","domY","pt","createSVGPoint","matrixTransform","getScreenCTM","inverse","zoomWithWheel","onWheel","CreateNew","handleChange","removePremise","verify","create","e","target","value","setupFunc","tex","symbol","convertToTeX","closeBtn","formulaInput","onChange","math","getFormulaCell","IntroContent","IntroWindow","createView","callCreate","animateAway","createShown","floatingWindowCSS","App","createNewProof","setupProof","openCanvas","saveProof","introWindow","initialCSS","canvasOpen","popupOpen","Boolean","location","hostname","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.88490d54.chunk.js","sourcesContent":["/* \n * Return a boolean indicating if the inputted sentence is \n * a correctly formatted. Utilizes a recursive technique,\n * evaluating each sentence as though it were an atomic\n * sentence or any phi and psi combined with a binary \n * operator. \n*/\n\nconst { binary, unary } = require('./operators.json')\n\nfunction escapeRegExp(string) {\n  return string.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&'); // $& means the whole matched string\n}\n\nfunction arrToRegex(arr) {\n  arr = arr.map(el => escapeRegExp(el));\n  return '(?:' + arr.join('|') + ')'\n} \n\nconst uReg = arrToRegex(Object.keys(unary));\nconst regexStr = `^(${uReg}*[A-Za-z]+|${uReg}*\\\\((.*)\\\\))(${arrToRegex(Object.keys(binary))})(${uReg}*[A-Za-z]+|${uReg}*\\\\((.*)\\\\))$`\nlet binaryRegex = new RegExp(regexStr) // eslint-disable-line\nlet atomicRegex = new RegExp(`^${uReg}*[A-Za-z]+$`)\nlet parenthesisRegex = new RegExp(`^${uReg}*\\\\((.*)\\\\)$`)\n\nfunction verifyRecursive(sentence) {\n  let res\n  if (sentence.match(atomicRegex)) return true;\n  else if ((res = binaryRegex.exec(sentence)) !== null) {\n    if (res == null) return false;\n    if (res[2] && res[5]) \n      return verifyRecursive(res[2]) && verifyRecursive(res[5]);\n    else if (res[2]) \n      return verifyRecursive(res[2]);\n    else if (res[5]) \n      return verifyRecursive(res[5]);\n    else return true;\n  } else if ((res = parenthesisRegex.exec(sentence)) !== null)\n    return verifyRecursive(res[1])\n}\n\nexport {\n  binaryRegex,\n  atomicRegex,\n  parenthesisRegex\n}\n\nexport default (sentence) => {\n  // filter out spaces\n  sentence = sentence.replace(/\\s/g, '')\n  return verifyRecursive(sentence);\n}","import verifySentence, { \n  parenthesisRegex, \n  binaryRegex,\n  atomicRegex\n} from './verifySentence';\n\nconst operators = require('./operators.json')\n\nfunction escapeRegExp(string) {\n  return string.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&'); // $& means the whole matched string\n}\n\nconst binaryOperators = operators.binary\nlet keys = Object.keys(binaryOperators);\nkeys = keys.map(el => escapeRegExp(el));\nconst binarySymbReplace = new RegExp('(?:' + keys.join('|') + ')', 'g')\n\nconst unaryOperators = operators.unary\n\nconst convertToTeX = (formula) => {\n  if (typeof formula === 'string' || formula instanceof String) {\n    // filter out spaces\n    formula = formula.replace(/\\s/g, '')\n    let symbol\n    // replace all binary operators\n    while ((symbol = binarySymbReplace.exec(formula)) !== null) {\n      formula = formula.substr(0,symbol['index']) \n                    + binaryOperators[symbol[0]] + ' '\n                    + formula.substr(symbol['index'] + symbol[0].length);\n    }\n    // replace all unary operators\n    for (let i in Object.keys(unaryOperators)) {\n      symbol = Object.keys(unaryOperators)[i];\n      formula = formula.replace(new RegExp(escapeRegExp(symbol), 'g'), unaryOperators[symbol] + ' ');\n    }\n    // filter out all other characters\n    formula = formula.replace(/[^()A-Za-z\\\\\\s]/g, '')\n    return formula\n  }\n  else return \"\"\n}\n\nfunction countUnary(statement) {\n  const matchesList = (val) => (op) => op === val;\n  let c = 0;\n  for (c in statement.split(\"\"))\n    if (!Object.keys(unaryOperators).some(matchesList(statement.charAt(c))))\n      break;\n  return c;\n}\n\nconst stripUnary = (s, convertStatement) => {\n  if (convertStatement == null) \n    convertStatement = true;\n  let c = countUnary(s);\n  let statement = s.substr(c)\n  if (convertStatement) statement = convertToEG(statement)\n  else statement = '{' + statement + '}'\n  return \"(\".repeat(c) + statement + \")\".repeat(c)\n}\n\nconst convertToEG = (formula) => {\n  if ((typeof formula === 'string' || formula instanceof String) && verifySentence(formula)) {\n    // filter out spaces\n    formula = formula.replace(/\\s/g, '')\n    let binary = binaryRegex.exec(formula)\n    let parenthesis = parenthesisRegex.exec(formula)\n    let unary = atomicRegex.exec(formula)\n    if (binary) {\n      let left = convertToEG(binary[1])\n      let right = convertToEG(binary[4])\n      let symConversion = operators.eg[binary[3]];\n      return symConversion.replace(/\\$1/g, left).replace(/\\$2/g, right)\n    } else if (parenthesis) {\n      if (countUnary(formula) != 0) {\n        return stripUnary(formula)\n      }\n      return convertToEG(parenthesis[1]);\n    } else if (unary) {\n      return stripUnary(formula, false);\n    } else return null;\n  }\n  else return null;\n}\n\n/*  Given a string and the index of the open parenthesis, this\n *  will return the index of the closed parenthesis\n */\nconst getMatchingParen = (formula, start) => {\n  // hold the number of '(' minus the number of ')'\n  let parens = 0\n  let j = start\n  while (j < formula.length) {\n    if (formula[j] === '(') {\n      parens++\n    }\n    else if (formula[j] === ')') {\n      parens--\n      // if parens is 0, then the current ')' matches the start parenthesis\n      if (parens === 0)\n        return j\n    }\n    j++\n  }\n}\n\n/*  Converts a string representing an Existential Graph into\n *  a nested array. Acts recursively, calling iteslf again\n *  When a pair of parentehses are found. If given an index i,\n *  this will start from that index.\n *  For example: \n *  \"((({P})){Q}{R}){P}\" => [ [ [['P']],'Q','R' ],'P' ]\n */\nconst convertToArray = (formula, i = 0) => {\n  if (typeof formula === 'string' || formula instanceof String) {\n    // hold the array of the current level that will be returned\n    let arr = []\n    // loop through the string\n    while (i < formula.length) {\n      // if closing parenthesis, return the array for this subexpression\n      if (formula[i] === '(') {\n        // find the matching pair of parentheses of the subexpression\n        let j = getMatchingParen(formula, i)\n        // push the subexpression into the array\n        let subExp = formula.substr(i+1, j-1)\n        if (subExp)\n          arr.push(convertToArray(formula.substr(i+1, j-1)))\n        i = j\n      }\n      // if a variable is found, push it to the array\n      else if (formula[i] === '{') {\n        let text = formula[++i];\n        if (text === '}') arr.push('\\u00A0')\n        else arr.push(text)\n        i++\n      }\n      i++\n    }\n    // return the array that values the current expression\n    return arr\n  }\n  else return null\n}\n\nexport {\n  convertToTeX,\n  convertToEG,\n  convertToArray,\n  verifySentence\n}","import React from 'react';\n\nclass Toolbox extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      functions: [\n        {\n          str: \"Iterate/Deiterate\",\n          func: 'iterate',\n          highlight: { 'cut': 'all' }\n        },\n        {\n          str: \"Remove Double Cut\",\n          func: 'dcRemove',\n          highlight: { 'cut': 'all' }\n        },\n        {\n          str: \"Add Double Cut\",\n          func: 'dcAdd',\n          highlight: { 'cut': 'all', 'var': 'all' }\n        },\n        {\n          str: \"Insertion\",\n          func: 'insert',\n          highlight: { 'cut': 'odd', 'var': 'odd' }\n        },\n        {\n          str: \"Erasure\",\n          func: 'erase',\n          highlight: { 'cut': 'even', 'var': 'even' }\n        }\n      ]\n    };\n  }\n\n  componentDidMount() {  \n  }\n\n  render() {\n    if (this.props.hidden) return <React.Fragment />;\n    return (\n      <div className=\"toolbox\" ref={this.canvas}>\n        <h3>Tools</h3>\n        {this.state.functions.map(el => (\n          <div className=\"tool\" onClick={() => this.props.setSelection(el.highlight, el.func)}>{el.str}</div>\n        ))}\n      </div>\n    );\n  }\n}\n\nexport default Toolbox;","import React from 'react';\nimport { ReactSVG } from 'react-svg';\n\nclass StepMenu extends React.Component {\n  handleClick(event, step, disabled) {\n    event.preventDefault();\n    if (!disabled) {\n      // Must update color before updating props to allow component to\n      // render with the proper current color rather than the state before\n      this.props.setStep(step);\n    }\n  }\n\n  getColor(disabled) {\n    return disabled ? \"rgb(136, 136, 136)\" : \"rgb(68, 68, 68)\";\n  }\n\n  render() {\n    let { hide, currentStep, stepInfo } = this.props;\n    if (hide) return (<React.Fragment />);\n    let backEnabled = currentStep === (stepInfo.length - 1);\n    let forwardEnabled = currentStep === 0;\n    return (\n      <React.Fragment>\n        <div className=\"step-menu\">\n        <div style={{ color: this.getColor(forwardEnabled)}}>\n          <div onClick={(event) => this.handleClick(event, 0, forwardEnabled)}>\n            <ReactSVG src={process.env.PUBLIC_URL + \"/assets/step-first.svg\"}/>\n          </div>\n          <div onClick={(event) => this.handleClick(event, currentStep - 1, forwardEnabled)}>\n            <ReactSVG src={process.env.PUBLIC_URL + \"/assets/step-prev.svg\"} />\n          </div>\n        </div>\n        <div style={{ color: this.getColor(backEnabled)  }}>\n          <div onClick={(event) => this.handleClick(event, currentStep + 1, backEnabled)}>\n            <ReactSVG src={process.env.PUBLIC_URL + \"/assets/step-next.svg\"} />\n          </div>\n          <div onClick={(event) => this.handleClick(event, stepInfo.length - 1, backEnabled)}>\n            <ReactSVG src={process.env.PUBLIC_URL + \"/assets/step-last.svg\"} />\n          </div>\n        </div>\n        </div>\n        <div className=\"step-text\">\n          Step {currentStep + 1} of {stepInfo.length}\n        </div>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default StepMenu;","export default {\n  gridSize: 1,\n  cutPadding: {\n    horizontal: 10,\n    vertical: 5\n  },\n  cutCornerRadius: 10,\n  initialSeparation: 50,\n}","import React from 'react';\nimport config from './config';\n\nclass EGVariable extends React.Component {\n  constructor(props) {\n    super(props);\n    this.text = React.createRef()\n    this.getCoords = this.props.getCoords\n    this.handleClick = this.handleClick.bind(this);\n    this.state = {\n      x: props.x,\n      y: props.y,\n      cursorOver: false,\n      dragging: false\n    };\n\n    this.panzoom = this.props.panzoom\n\n    window.addEventListener('mousemove', this.onMouseMove.bind(this))\n    window.addEventListener('mousedown', this.handleDragStart.bind(this))\n    window.addEventListener('mouseup', this.handleDragEnd.bind(this))\n    window.addEventListener('click', this.handleClick)\n  }\n\n  handleClick() {\n    if (this.state.cursorOver \n      && this.props.enableHighlight \n      && this.props.selectedCallback) \n    {\n      this.props.selectedCallback(this.props.id);\n      this.setState({ cursorOver: false });\n    }\n  }\n\n  componentDidMount() {  \n    this.text.current.style.cursor = \"pointer\";\n  }\n\n  handleDragStart(evt) {\n    if (this.state.cursorOver) {\n      this.panzoom.pause()\n      this.setState({ dragging: true })\n    }\n  }\n\n  handleDragEnd(evt) {\n    this.panzoom.resume()\n    let { x, y } = this.state;\n    this.props.setCoords(x, y);\n    this.setState({ dragging: false })\n  }\n\n  onMouseMove(evt) {\n    if (this.state.dragging) {\n      let { x, y } = this.getCoords(evt.clientX, evt.clientY)\n      x = Math.round(x/config.gridSize)*config.gridSize\n      y = Math.round(y/config.gridSize)*config.gridSize\n      this.props.setCoords(x, y);\n      this.setState({ x: x, y: y })\n    }\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener('click', this.handleClick);\n    window.removeEventListener('mousemove', this.onMouseMove.bind(this))\n    window.removeEventListener('mousedown', this.handleDragStart.bind(this))\n    window.removeEventListener('mouseup', this.handleDragEnd.bind(this))\n  }\n\n  render() {\n    let highlight = this.state.cursorOver && this.props.enableHighlight;\n    return (\n      <text \n        className=\"noselect\"\n        pointerEvents={this.props.interaction ? null : 'none'}\n        x={this.state.x} \n        y={this.state.y} \n        id={this.props.id}\n        fill={highlight ? \"blue\" : \"black\"}\n        onMouseEnter={() => this.setState({ cursorOver: true })}\n        onMouseLeave={() => this.setState({ cursorOver: false })}\n        ref={this.text}>\n        {this.props.children}\n      </text>\n    );\n  }\n}\n\nexport default EGVariable;","import React from 'react';\nimport config from './config';\n\nclass EGCut extends React.Component {\n  constructor(props) {\n    super(props);\n    this.cut = React.createRef();\n    this.BB = React.createRef();\n    this.getBBoxData = this.getBBoxData.bind(this);\n    this.handleClick = this.handleClick.bind(this);\n    this.update = this.update.bind(this);\n    this.state = { highlight: false, bounding: {_x:0,_y:0,_w:0,_h:0} };\n\n    window.addEventListener('click', this.handleClick)\n  }\n\n  handleClick() {\n    if (this.state.highlight \n      && this.props.enableHighlight \n      && this.props.selectedCallback) \n    {\n      this.props.selectedCallback(this.props.id);\n      this.setState({ highlight: false });\n    }\n  }\n\n  getBBoxData() {\n    if (this.cut.current) {\n      let { x, y, width, height } = this.cut.current.getBBox();\n      let _x = x - config.cutPadding.horizontal;\n      let _y = y - config.cutPadding.vertical;\n      let _w = width + config.cutPadding.horizontal * 2;\n      let _h = height + config.cutPadding.vertical * 2;\n      return { _x, _y, _w, _h };\n    }\n    return {};\n  }\n\n  update() {\n    if (!this.interval) {\n      this.interval = setInterval(() => {\n        this.setState({ bounding: this.getBBoxData() });\n      }, 1);\n      setTimeout(() => {\n        clearInterval(this.interval);\n        this.interval = null;\n      }, 100);\n    }\n  }\n\n  componentDidMount() { \n    this.update()\n  }\n\n  componentDidUpdate() {\n    this.update()\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener('click', this.handleClick);\n    if (this.interval)\n      clearInterval(this.interval);\n  }\n\n  render() {\n    let childEl = this.props.children;\n    if (childEl.length < 1) {\n      childEl = <EGCut>{\" \"}</EGCut>\n    }\n    let highlight = this.state.highlight && this.props.enableHighlight;\n    let { _x, _y, _w, _h } = this.state.bounding;\n    return (\n      <React.Fragment>\n        <rect\n          x={_x}\n          y={_y}\n          width={_w}\n          height={_h}\n          fillOpacity=\"0.7\" \n          strokeOpacity=\"1\"\n          stroke=\"black\"\n          fill={highlight ? \"#9AA899\" : \"white\"}\n          onMouseEnter={() => this.setState({ highlight: true })}\n          onMouseLeave={() => this.setState({ highlight: false })}\n          rx={config.cutCornerRadius.toString()} \n          ry={config.cutCornerRadius.toString()}\n        />\n        <g ref={this.cut}>\n          {this.props.children}\n        </g>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default EGCut;","import React from 'react';\nimport { convertToArray } from '../converters';\nimport Toolbox from './Toolbox';\nimport StepMenu from './StepMenu';\nimport EGVariable from './EGVariable';\nimport EGCut from './EGCut';\nimport './Canvas.scss';\nimport Panzoom from 'panzoom';\nimport config from './config';\nimport { NotificationContainer, NotificationManager } from 'react-notifications';\nconst nanoid = require('nanoid').nanoid;\n\n// some defaults: \n//    <text> blocks are automatically 22px high\n\nconst TEXT_H = 22;\n\nfunction initXY(step, level) {\n  let data = {}\n  let currentX = 0\n  let currentY = 0\n  let maxX = 0\n  let maxY = 0\n\n  // gapSize should be equal to the number of level changes\n  // in between two variables, so that we can evenly place \n  // them initially across the screen\n  function initXYRecurse(step, level, gapSize) {\n    console.log(data)\n    for (let s in step) {\n      if (step[s] instanceof Array && step[s].length > 0) {\n        let id = nanoid()\n        step[s] = { data: initXYRecurse(step[s], level + 1), id: id, type: \"cut\" }\n        data[id] = { type: \"cut\", level: level }\n      } else {\n        let X = currentX;\n        let Y = currentY;\n        let id = nanoid()\n        data[id] = { \n          type: \"var\",\n          var: step[s], \n          x: Math.round(X/config.gridSize)*config.gridSize, \n          y: Math.round(Y/config.gridSize)*config.gridSize,\n        }\n        step[s] = id\n        maxY = Y > maxY ? Y : maxY;\n        maxX = X > maxX ? X : maxX;\n        currentX += config.initialSeparation\n      }\n    }\n    return step\n  }\n  return { stepZero: { data: initXYRecurse(step, level), h: maxY + TEXT_H, w: maxX }, data: data }\n}\n\nclass Canvas extends React.Component {\n  constructor(props) {\n    super(props);\n    this.canvas = React.createRef();\n    this.canvasContainer = React.createRef();\n\n    this.renderStep = this.renderStep.bind(this);\n    this.changePos = this.changePos.bind(this);\n    this.getSVGCoords = this.getSVGCoords.bind(this);\n    this.highlightCut = this.highlightCut.bind(this);\n    this.startSelection = this.startSelection.bind(this);\n\n    let { premises, conclusion, steps, data } = this.props.proof;\n    this.state = {\n      proof: {\n        premises: premises,\n        conclusion: conclusion\n      },\n      steps: steps || [],\n      data: data || {},\n      currentStep: 0,\n      moveListeners: [],\n      highlights: {\n        cut: 'none', // 'none', 'odd', 'even', 'all'\n        var: 'none'\n      },\n      cbFunction: null,\n      interaction: true,\n      functions: {\n        insert: (id) => {\n          console.log(\"INSERTION\")\n        },\n        erase: (id) => {\n          console.log(\"ERASURE\")\n          return this.erasure(id);\n        },\n        iterate: (id) => {\n          console.log(\"ITERATION\")\n        },\n        dcRemove: (id) => {\n          console.log(\"DOUBLE CUT Remove\")\n          return this.doubleCutRemove(id);\n        },\n        dcAdd: (id) => {\n          console.log(\"DOUBLE CUT Add\")\n          return this.doubleCutAdd(id);\n          \n        }\n      }\n    }\n  }\n\n  startSelection(selectable, nameOfFunction) {\n    let { steps, currentStep } = this.state;\n    // only allow steps to be conducted at the end of a proof\n    if (currentStep+1 !== steps.length) {\n      return\n    }\n    this.setState({ \n      highlights: selectable, \n      interaction: false, \n      cbFunction: (id) => {\n        let successful = this.state.functions[nameOfFunction](id); \n        if (successful) \n          this.setState({ \n            highlights: {\n              cut: 'none', \n              var: 'none'\n            },\n            interaction: true, \n            cbFunction: null });\n      }\n    });\n  }\n\n  erasure(id) {\n    let { steps, currentStep, data } = this.state;\n    // Create a new step\n    let step = this.copyStep(steps[currentStep]);\n    // Find the data that will be erased\n    let erased = this.findID(step, id);\n    console.log(erased)\n    if (!erased) {\n      return false;\n    }\n    // Get the parent of the erased section\n    let parent = this.findParent(step, id)\n    if (!parent) {\n      return false;\n    }\n    // Remove the erased data from the parent's data array\n    const index = parent.data.indexOf(erased);\n    if (index > -1)\n      parent.data.splice(index, 1);\n    else {\n      return false;\n    }\n    // Update the state\n    currentStep+=1;\n    steps.push(step);\n    this.setState({ steps: steps, currentStep: currentStep, data:data });\n    return true;\n  }\n\n  /* Adds a double cut given the ID of the data that will be inside the cut.\n  *  Will only run if the current step is the last step.\n  */\n  doubleCutAdd(ID) {\n    let { steps, currentStep, data } = this.state;\n    // create a new step\n    let step = this.copyStep(steps[currentStep]);\n    // use findID to find the data represented by the id\n    // this is the data that will be inside the two new cuts\n    let inside = this.findID(step, ID);\n    if (!inside) {\n      return false;\n    }\n    // create a new cut with another one inside it\n    let cut1_id = nanoid();\n    let cut2_id = nanoid();\n    let cut2 = {\n      data: [inside],\n      id: cut2_id,\n      type: \"cut\"\n    }\n    let cut1 = {\n      data: [cut2],\n      id: cut1_id,\n      type: \"cut\"\n    }\n    // Set the levels of the two cuts\n    let level = data[ID].level\n    data[cut2_id] = { type: \"cut\", level: level };\n    data[cut1_id] = { type: \"cut\", level: level + 1 };\n    // increase the level of the inside cut along with all cuts inside of it by 2\n    this.changeCutLevel(step, ID, 2)\n\n    // get the parent of the selection\n    let parent = this.findParent(step, ID)\n    if (!parent) {\n      return false;\n    }\n    // Add the contents of the new cuts to the data array\n    // after removing the original contents\n    const index = parent.data.indexOf(inside);\n    if (index > -1) {\n      parent.data.splice(index, 1);\n    }\n    parent.data = parent.data.concat(cut1);\n    // Change the state data accordingly\n    currentStep+=1;\n    steps.push(step);\n    this.setState({ steps: steps, currentStep: currentStep, data:data });\n    return true;\n  }\n\n  /* Removes a double cut given the ID of the outside cut.\n  *  Will only run if the current step is the last step.\n  *  Creates a deep copy of the current step, and replaces the cut with\n  *  the given ID with the contents of the second cut, only if they exist.\n  *  Then adds the edited copy of the current step to the end of the step array.\n  */\n  doubleCutRemove(cutID) {\n    let { steps, currentStep, data } = this.state;\n    // Create a new step\n    let step = this.copyStep(steps[currentStep]);\n\n    // use findID to find the cut with the given ID\n    let firstCut = this.findID(step, cutID);\n    // If it is actually a cut and has another cut inside\n    if (firstCut && firstCut.type === \"cut\") {\n      let secondCut = firstCut.data;\n      if (secondCut && secondCut.length === 1 && secondCut[0].type === \"cut\") {\n        // Get the data inside the second cut\n        let newContents = secondCut[0].data;\n        // Get the parent of the original cut being removed\n        let parent = this.findParent(step, cutID)\n        if (!parent) {\n          return false;\n        }\n        // Remove the first cut from the data array\n        const index = parent.data.indexOf(firstCut);\n        if (index > -1) {\n          parent.data.splice(index, 1);\n        }\n        // Add the contents of the second cut to the data array\n        parent.data = parent.data.concat(newContents);\n        // Update the state\n        currentStep+=1;\n        steps.push(step);\n        this.setState({ steps: steps, currentStep: currentStep, data:data });\n        return true;\n      }\n      else return false;\n    }\n    else return false;\n  }\n\n  /* Given a step and the ID of a cut, will iterate through all cuts within\n   * that cut and change their level by a specified amount.\n  */\n  changeCutLevel(step, id, change) {\n    let { data } = this.state\n    // when true, the levels should change in the functions below\n    let idFound = false\n    // Changes the \n    function changeLevelMap(map) {\n      // get the id for the current map\n      let mapID;\n      if (map.id) {\n        mapID = map.id\n        // if it matches the id being searched, update the boolean\n        if (mapID === id) {\n          idFound = true;\n        }\n      }\n      // If the ID has been found, update the level of the current cut\n      if (idFound) {\n        data[mapID].level += change;\n      }\n      // call the function of the data array if it exists\n      if (map.data){\n        changeLevelArray(map.data);\n      }\n    }\n    function changeLevelArray(arr) {\n      for (let a in arr) {\n        // If a non-string is found (a cut)\n        if (typeof arr[a] !== 'string') {\n          // Change the level of the cut\n          changeLevelMap(arr[a])\n        }\n      }\n    }\n    changeLevelArray(step.data)\n    this.setState({ data: data })\n  }\n\n  // Performs a deep copy of oldStep into newStep, used to not change previous steps\n  // By allowing them to be copied without using a reference\n  copyStep(oldStep) {\n    let newStep = {};\n    function copyDataMap(oldData) {\n      let newData = {};\n      for (let d in oldData) {\n        // If an id or type if found, copy directly\n        if(typeof oldData[d] === 'string') {\n          newData[d] = oldData[d];\n        }\n        // Otherwise if an array is found, copy using helper function\n        else {\n          newData[d] = copyDataArray(oldData[d]);\n        }\n      }\n      return newData;\n    }\n    function copyDataArray(oldData) {\n      let newData = [];\n      for (let d in oldData) {\n        // If an ID is found (variable), copy directly\n        if(typeof oldData[d] === 'string') {\n          newData.push(oldData[d]);\n        }\n        // If a map was found (cut), copy using helper function\n        else {\n          newData.push(copyDataMap(oldData[d]));\n        }\n      }\n      return newData;\n    }\n    // Copy the data, width, and height of the original into the new step\n    newStep.data = copyDataArray(oldStep.data);\n    newStep.h = oldStep.h;\n    newStep.w = oldStep.w;\n    return newStep;\n  }\n\n  /* Finds and returns the item that is the parent of the item\n   * with the specified ID, given the step to search as well.\n  */\n  findParent(searchedStep, id) {\n    // holds the parent of the id\n    let parent = searchedStep\n    // Searches an array for the ID, returns true if it is found\n    function findInArray(arr) {\n      for (let a in arr) {\n        // If an ID is found, compare it\n        if (typeof arr[a] === 'string') {\n          if (arr[a] === id) {\n            return true;\n          }\n        }\n        // Otherwise if a datamap is found, check the ID\n        else {\n          // If ID matches, return true\n          if (arr[a].id && arr[a].id === id) {\n            return true;\n          }\n          // Otherwise, search the datamap\n          else {\n            findInMap(arr[a])\n          }\n        }\n      }\n      return false;\n    }\n    function findInMap(map) {\n      // if the map contains data, search the data\n      if (map.data) {\n        // if found, set parent to this map\n        if(findInArray(map.data)) {\n          parent = map;\n        }\n      }\n    }\n    findInArray(searchedStep.data);\n    return parent;\n  }\n\n  // finds and returns the item with the specified ID in a given step\n  findID(searchedStep, id) {\n    // Find the ID in an array\n    function findIDArray(arr) {\n      for (let a in arr) {\n        // if a string, aka an ID\n        if (typeof arr[a] === 'string') {\n          // return the ID if found\n          if (arr[a] === id) {\n            return id;\n          }\n        }\n        // if a data map is found with the correct id, return the data map\n        else if (arr[a].id === id) {\n          return arr[a];\n        // otherwise, call findID step on the datamap that has the incorrect ID\n        } else {\n          let s = findIDMap(arr[a]);\n          if (s)\n            return s;\n        }\n      }\n    }\n    // Finds the ID in a data map representing a step\n    function findIDMap(step) {\n      for (let s in step) {\n        // if an array is found, call findIDArray on each element\n        if (step[s] instanceof Array) {\n          return findIDArray(step[s]);\n        // if an id is found, check if it matches and return the data if so\n        } else if (s === \"id\") {\n          if (step[s] === id)\n            return step;\n        }\n      }\n    }\n    return findIDMap(searchedStep);\n  }\n\n  changePos(id, x, y) {\n    let { data } = this.state;\n    Object.assign(data[id], { x: x, y: y })\n    this.setState(data)\n  }\n\n  highlightCut(level) {\n    if (this.state.highlights.cut === 'all') return true;\n    let odd = false;\n    if (level % 2 === 1) odd = true;\n    if (this.state.highlights.cut === 'odd' && odd) return true;\n    else if (this.state.highlights.cut === 'even' && !odd) return true;\n    return false;\n  }\n\n  highlightVar(level) {\n    if (this.state.highlights.var === 'all') return true;\n    let odd = false;\n    if (level % 2 === 1) odd = true;\n    if (this.state.highlights.var === 'odd' && odd) return true;\n    else if (this.state.highlights.var === 'even' && !odd) return true;\n    return false;\n  }\n\n  renderStep(stepIndex) {\n    let { data } = this.state;\n    let step = this.state.steps[stepIndex]\n    if (step) {\n      const setXY = (id,x,y) => {\n        data[id].x = x;\n        data[id].y = y;\n        this.setState({ data: data })\n      }\n\n      const renderRecurse = (step) => {\n        let jsx = [];\n        for (let s in step) {\n          if (step[s].type === \"cut\") {\n            let level = data[step[s].id].level;\n            let groupElement = (\n              <EGCut \n                level={level} \n                enableHighlight={this.highlightCut(level)}\n                id={step[s].id}\n                selectedCallback={this.state.cbFunction}>\n                {renderRecurse(step[s].data)}\n              </EGCut>\n            );\n            jsx.push(groupElement);\n          } else {\n            let el = this.state.data[step[s]];\n            let level = data[step[s]].level;\n            jsx.unshift(\n              <EGVariable \n                x={el.x} \n                y={el.y} \n                id={step[s]} \n                enableHighlight={this.highlightVar(level)}\n                selectedCallback={this.state.cbFunction}\n                panzoom={this.panzoom}\n                interaction={this.state.interaction || this.highlightVar(level)}\n                getCoords={this.getSVGCoords}\n                setCoords={(x,y) => setXY(step[s],x,y)}\n                key={step[s]}>\n                {el.var}\n              </EGVariable>\n            );\n          }\n        }\n        return jsx;\n      }\n      renderRecurse.bind(this);\n      return renderRecurse(step.data)\n    }\n  }\n\n  componentDidMount() {  \n\n    this.panzoom = Panzoom(this.canvas.current, {\n      maxZoom: 6,\n      minZoom: 0.5\n    });\n    // this.canvasContainer.current.addEventListener('wheel', this.panzoom.zoomWithWheel);\n    const vw = Math.max(document.documentElement.clientWidth, window.innerWidth || 0);\n    const vh = Math.max(document.documentElement.clientHeight, window.innerHeight || 0);\n    // if there are no existing steps, init first step\n    let { steps } = this.state;\n    if (steps.length === 0) {\n      let { premises, conclusion } = this.state.proof;\n      let { stepZero, data } = initXY(convertToArray(premises.join('')), 0);\n      steps.push(stepZero);\n      this.setState({ steps: steps, data: data });\n    }\n    // required to use setState to trigger re-render after creation of panzoom\n    this.setState({ currentStep: 0 });\n    let step = this.state.steps[this.state.currentStep];\n\n    this.panzoom.moveTo(vw/2 - step.w, vh/2 - step.h);\n    this.panzoom.zoomTo(vw/2 - step.w, vh/2 - step.h, 2);\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener('resize', this);\n  }\n\n  getSVGCoords(domX, domY) {\n    var pt = this.canvasContainer.current.createSVGPoint();\n\n    pt.x = domX;\n    pt.y = domY;\n\n    return pt.matrixTransform(this.canvas.current.getScreenCTM().inverse());\n  }\n\n  render() {\n    let zoomWithWheel = () => {}\n    let { steps, currentStep } = this.state;\n    if (this.panzoom)\n      zoomWithWheel = this.panzoom.zoomWithWheel\n    return (\n      <div>\n        <Toolbox \n          hidden={currentStep+1 !== steps.length}\n          functions={this.state.functions}\n          setSelection={this.startSelection}\n        />\n        <svg \n          ref={this.canvasContainer}\n          className=\"canvas noselect\" \n          onWheel={zoomWithWheel} >\n          <g ref={this.canvas}>\n            {this.panzoom && this.renderStep(this.state.currentStep)}\n          </g>\n        </svg>\n        <StepMenu \n          currentStep={this.state.currentStep} \n          stepInfo={this.state.steps} \n          setStep={s => this.setState({ currentStep: s, interaction: s === this.state.steps.length - 1 })}\n        />\n      </div>\n    );\n  }\n}\n\nexport default Canvas;\n","import React from 'react';\nimport verify from '../verifySentence';\nimport { convertToTeX, convertToEG } from '../converters';\n// KATEX\nimport 'katex/dist/katex.min.css';\nimport TeX from '@matejmazur/react-katex';\nimport './CreateNew.scss';\n\nclass CreateNew extends React.Component {\n  constructor(props) {\n    super(props);\n  \n    this.state = {\n      premises: [\n        ''\n      ],\n      conclusion: ''\n    };\n\n    this.handleChange.bind(this)\n    this.removePremise.bind(this)\n    this.verify = this.verify.bind(this)\n    this.create = this.create.bind(this)\n  }\n\n  componentDidMount() {\n\n  }\n\n  handleChange(e, i) {\n    if (i != null) {\n      let { premises } = this.state;\n      premises[i] = e.target.value;\n      this.setState({ premises: premises })\n    }\n    else this.setState({ conclusion: e.target.value })\n  }\n\n  removePremise(index) {\n    let { premises } = this.state;\n    premises.splice(index, 1);\n    this.setState({ premises: premises })\n  }\n\n  verify() {\n    let { premises, conclusion } = this.state;\n    for (let i in premises) {\n      if (premises[i] === '' || !premises[i])\n        return false;\n    }\n    if (conclusion === '' || !conclusion)\n      return false;\n    return true;\n  }\n\n  create() {\n    console.log(\"Creating...\")\n    console.log(\"Verification concluded \" + this.verify())\n    if (this.verify()) {\n      let { premises, conclusion } = this.state;\n      for (let i in premises) {\n        premises[i] = convertToEG(premises[i])\n        console.log(premises[i])\n      }\n      conclusion = convertToEG(conclusion)\n      this.props.setupFunc(premises, conclusion, [])\n    }\n  }\n\n  getFormulaCell(formula, i) {\n    let tex, eg\n    if (verify(formula)) {\n      tex = convertToTeX(formula);\n      eg = convertToEG(formula);\n    }\n    let closeBtn = <td \n      className=\"close interactive\" \n      onClick={() => this.removePremise(i)}>\n        &#10005;\n      </td>;\n    let formulaInput = <input onChange={ (e) => this.handleChange(e,i) } />;\n    if (i == null) {\n      formulaInput = <input onChange={ (e) => this.handleChange(e) } />;\n      closeBtn = <td className=\"close\"/>;\n    }\n    if (i === 0) \n      closeBtn = <td className=\"close\"/>;\n    return (\n      <tr>\n        <td>\n          {formulaInput}\n        </td>\n        <td>\n          {tex && <TeX math={tex} />}\n        </td>\n        <td>\n          {eg && <TeX math={eg} />}\n        </td>\n        { closeBtn }\n      </tr>\n    );\n  }\n\n  render() {\n    let { premises, conclusion } = this.state;\n    return (\n      <div className=\"content full-width\">\n        <h1>Create New</h1>\n        <h2>File Name</h2>\n        <input />\n        <table className=\"formulaTable\">\n          \n        </table>\n        <h2>Premises</h2>\n        <table className=\"formulaTable\">\n          <tr>\n              <td>\n                Formula\n              </td>\n            <td>TeX notation</td><td>EG notation</td><td className=\"close\"/>\n          </tr>\n          {premises.map((formula,i) => this.getFormulaCell(formula, i))}\n          <tr>\n            <td className=\"interactive\" onClick={() => this.setState({ premises: premises.concat(['']) }) }>\n              <span className=\"plus\" />Add New Premise\n            </td>\n            <td/><td/><td className=\"close\"/>\n          </tr>\n        </table>\n        <h2>Conclusion</h2>\n        <table className=\"formulaTable\">\n          {this.getFormulaCell(conclusion)}\n        </table>\n      </div>\n    );\n  }\n}\n\nexport default CreateNew;","import React from 'react';\nimport CreateNew from './CreateNew';\nimport { ReactSVG } from 'react-svg';\nimport './intro.scss';\n\nconst IntroContent = () => (\n  <div className=\"content\">\n    <div className=\"column\">\n      <h1>Existential Graphs</h1>\n      <p>\n        Using this tool, you can initialize proofs in the existential graph schema and then you can go through the process of solving them. You can save these proofs and look back at them later.\n      </p>\n    </div>\n    <div className=\"divider\" />\n    <div className=\"column\">\n      <h1>Recent Proofs</h1>\n    </div>\n  </div>\n);\n\nclass IntroWindow extends React.Component {\n  constructor(props) {\n    super(props);\n    this.createView = React.createRef();\n    this.callCreate = this.callCreate.bind(this);\n    this.animateAway = this.animateAway.bind(this);\n    this.state = {\n      createShown: false,\n      floatingWindowCSS: 'floating-window shown'\n    };\n  }\n\n  componentDidMount() {\n  }\n\n  animateAway() {\n    this.setState({ floatingWindowCSS: 'floating-window' })\n  }\n\n  callCreate() {\n    this.createView.current.create();\n  }\n\n  render() {\n    const { createShown, floatingWindowCSS } = this.state;\n    return (\n      <div className={floatingWindowCSS}>\n        {!createShown && <IntroContent />}\n        {createShown && <CreateNew setupFunc={this.props.setupFunc} ref={this.createView}/>}\n          {!createShown && (\n            <div className=\"toolbar\">\n            <button onClick={() => this.setState({ createShown: true })}>\n              New \n            </button>\n            <button>\n              Open \n            </button>\n            </div>\n          )}\n          {createShown && (\n            <div className=\"toolbar\">\n              <button className=\"back\" onClick={() => this.setState({ createShown: false })}>\n                <span >\n                  <ReactSVG className=\"svg\" src=\"/assets/back-caret.svg\" />\n                </span>\n                Back \n              </button>\n              <button onClick={this.callCreate}>\n                Create \n              </button>\n            </div>\n          )}\n      </div>\n    );\n  }\n}\n\nexport default IntroWindow;","import React from 'react';\nimport './App.scss';\nimport Canvas from './canvas/Canvas';\nimport IntroWindow from './intro/IntroWindow';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n  \n    this.createNewProof = this.createNewProof.bind(this);\n    this.setupProof = this.setupProof.bind(this);\n    this.openCanvas = this.openCanvas.bind(this);\n    this.saveProof = this.saveProof.bind(this);\n    this.introWindow = React.createRef();\n    // this.state = {\n    //   initialCSS: 'initial',\n    //   canvasOpen: false,\n    //   popupOpen: false,\n    //   proof: {\n    //     premises: [],\n    //     conclusion: '',\n    //     steps: []\n    //   }\n    // };\n    this.state = {\n      initialCSS: 'initial',\n      canvasOpen: true,\n      popupOpen: false,\n      proof: {premises: [\"({Q})(({P}){Q})\"], conclusion: \"{Q}\", steps:[] }\n    };\n  }\n\n  saveProof(proof) {\n    this.setState({ proof: proof });\n  }\n\n  setupProof(premises, conclusion, steps) {\n    this.setState({ \n      proof: { \n        premises: premises,\n        conclusion: conclusion,\n        steps: steps\n      },\n      initialCSS: 'initial whiteBG'\n    });\n    this.introWindow.current.animateAway();\n    setTimeout(this.openCanvas, 1000);\n  }\n\n  openCanvas() {\n    this.setState({ \n      canvasOpen: true\n    });\n  }\n\n  createNewProof() {\n    this.setState({ popupOpen: true })\n  }\n\n  render() {\n    if (this.state.canvasOpen) {\n      return (\n        <div className=\"App\">\n          <Canvas \n            saveProof={this.saveProof} \n            proof={this.state.proof} />\n        </div>\n      );\n    }\n    return (\n      <div className={this.state.initialCSS}>\n        <IntroWindow \n          ref={this.introWindow} \n          setupFunc={this.setupProof}/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}